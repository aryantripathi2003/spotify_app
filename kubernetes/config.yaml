apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kafka-network
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              network/kafka-network: "true"
  podSelector:
    matchLabels:
      network/kafka-network: "true"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
spec:
  ingressClassName: nginx
  rules:
    - host: "spotify.quarkus.com"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: quarkus-app
                port:
                  number: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: zookeeper-app
  name: zookeeper-app
spec:
  ports:
    - port: 2181
      targetPort: 2181
  selector:
    service: zookeeper-app
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-app
spec:
  selector:
    app: elasticsearch-app
  ports:
    - protocol: TCP
      port: 9200
      targetPort: 9200
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: zookeeper-app
  name: zookeeper-app
spec:
  serviceName: zookeeper-app
  replicas: 1
  selector:
    matchLabels:
      service: zookeeper-app
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: zookeeper-app
    spec:
      securityContext:
        fsGroup: 1000
      enableServiceLinks: false
      containers:
        - name: zookeeper-app
          imagePullPolicy: Always
          image: confluentinc/cp-zookeeper:7.3.2
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_DATA_DIR
              value: "/var/lib/zookeeper/data"
            - name: ZOOKEEPER_LOG_DIR
              value: "/var/lib/zookeeper/log"
            - name: ZOOKEEPER_SERVER_ID
              value: "1"
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/zookeeper/data
              name: zookeeper-data
            - mountPath: /var/lib/zookeeper/log
              name: zookeeper-log
      hostname: zookeeper-app
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        storageClassName: standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1024Mi
    - metadata:
        name: zookeeper-log
      spec:
        storageClassName: standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1024Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: kafka-app
  name: kafka-app
spec:
  clusterIP: None
  selector:
    service: kafka-app
  ports:
    - port: 9092
      targetPort: 9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: kafka-app
  name: kafka-app
spec:
  serviceName: kafka-app
  replicas: 1
  selector:
    matchLabels:
      service: kafka-app
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: kafka-app
    spec:
      securityContext:
        fsGroup: 1000
      enableServiceLinks: false
      initContainers:
        - name: wait-for-zookeeper
          image: busybox
          command: [ "sh", "-c", "until nc -z zookeeper-app.default 2181; do echo waiting for zookeeper; sleep 2; done" ]
      containers:
        - name: kafka-app
          imagePullPolicy: IfNotPresent
          image: confluentinc/cp-kafka:7.0.1
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-app.default:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-app.default:9092"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL
              value: "PLAINTEXT"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_LOG_DIRS
              value: "/var/lib/kafka/data/kafka-logs"
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/kafka/data/kafka-logs
              name: kafka-data
      hostname: kafka-app
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        storageClassName: standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
spec:
  capacity:
    storage: 3Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mongodb"
    type: DirectoryOrCreate
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: elasticsearch-pv
spec:
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/elasticsearch"
    type: DirectoryOrCreate
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc
spec:
  volumeName: elasticsearch-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  volumeName: mongodb-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/redis"
    type: DirectoryOrCreate
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  volumeName: redis-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-app
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongodb-app
---
apiVersion: v1
kind: Service
metadata:
  name: quarkus-app
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
#      name: http
  selector:
    app: quarkus-app
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: redis-app
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis-app
#  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-app
  template:
    metadata:
      labels:
        app: mongodb-app
    spec:
      containers:
        - name: mongodb-app
          image: mongo:latest
          livenessProbe:
            exec:
              command: [ "mongosh", "--eval", "db.adminCommand('ping')" ]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: [ "mongosh", "--eval", "db.adminCommand('ping')" ]
            initialDelaySeconds: 10
            periodSeconds: 5
          startupProbe:
            exec:
              command: [ "mongosh", "--eval", "db.adminCommand('ping')" ]
            failureThreshold: 30
            periodSeconds: 10
          #          ports:
          #            - containerPort: 27017
          volumeMounts:
            - mountPath: "/data/db"
              name: mongodb-storage
      volumes:
        - name: mongodb-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-app
  template:
    metadata:
      labels:
        app: redis-app
    spec:
      containers:
        - name: redis-app
          image: redis/redis-stack:latest
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 20
            periodSeconds: 5
          readinessProbe:
            exec:
              command: [ "redis-cli", "ping" ]
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            tcpSocket:
              port: 6379
            failureThreshold: 30
            periodSeconds: 10
          #          ports:
          #            - containerPort: 6379
          env:
            - name: REDIS_ARGS
              value: "--save 20 1 --appendonly yes"
          volumeMounts:
            - mountPath: "/data"
              name: redis-storage
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch-app
  template:
    metadata:
      labels:
        app: elasticsearch-app
    spec:
      containers:
        - name: elasticsearch-app
          image: elasticsearch:8.0.0
          livenessProbe:
            httpGet:
              path: /_cluster/health
              port: 9200
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /_cat/health
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 9200
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 30
          env:
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "false"
            - name: xpack.security.http.ssl.enabled
              value: "false"
            - name: network.host
              value: 0.0.0.0
          volumeMounts:
            - mountPath: "/usr/share/elasticsearch/data"
              name: elasticsearch-storage
      volumes:
        - name: elasticsearch-storage
#          emptyDir: {}
          persistentVolumeClaim:
            claimName: elasticsearch-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarkus-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: quarkus-app
  template:
    metadata:
      labels:
        app: quarkus-app
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: [ "sh", "-c", "until nc -z kafka-app.default 9092; do echo waiting for kafka; sleep 2; done" ]
        - name: wait-for-mongodb
          image: busybox
          command: [ "sh", "-c", "until nc -z mongodb-app.default 27017; do echo waiting for mongo; sleep 2; done" ]
        - name: wait-for-redis
          image: busybox
          command: [ "sh", "-c", "until nc -z redis-app.default 6379; do echo waiting for redis; sleep 2; done" ]
        - name: wait-for-elasticsearch
          image: busybox
          command: [ "sh", "-c", "until nc -z elasticsearch-app.default 9200; do echo waiting for elasticsearch; sleep 2; done" ]
      containers:
        - name: quarkus-app
          image: aryantripathi2003/spotify-api:latestkub
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /q/health/ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /q/health/ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 30
#          ports:
#            - containerPort: 8080
#          env:
#            - name: KAFKA_BROKER
#              value: "kafka:9092"
#            - name: MONGO_URI
#              value: "mongodb://mongodb:27017"
#            - name: REDIS_HOST
#              value: "redis"

